# Python Module ciphersuite
import sys
import random
from binascii import hexlify, unhexlify


def enc(x, e, n):
    int_x = int.from_bytes(x, "little")
    y = pow(int_x,e,n)
    return hexlify(y.to_bytes(256, 'little'))

def dec(y, d, n):
    int_y = int.from_bytes(unhexlify(y), "little")
    x = pow(int_y,d,n)
    return x.to_bytes(256, 'little')


def miller_rabin(n, k):
    if n == 2 or n == 3:
        return True

    if n % 2 == 0:
        return False

    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2
    for _ in range(k):
        a = random.randrange(2, n - 1)
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def generate_prime_near(n):
    while not miller_rabin(n, 5):  # 5 rounds of testing
        n += 1
    return n


def getParams():
    n =  359538626972463181545861038157804946723595395788461314546860162315465351611001926265416954644815072042240227759742786715317579537628833244985694861278969875549726784258852583454926545232295812455974781434688279642285024570065434394221407644324597689555565042756427398479921596889935102426994310135095262036873   #Input from the server
    start = 2**512
    while n % start != 0:
        start += 1
    p = start
    q = n // start
    print("Final p: ", p, "\nFinal q: ", q)
    phi = (p-1)*(q-1)
    e = 65537                     # Input from the server
    d = pow(e, -1, phi)
    return (p, q, n, phi, e, d)


ciphertext = unhexlify('6234363236656265353030323662326532383162306339333965323566363531336131643335363938366463313865356533653130363263353965383864326434306430613430613562346433663164303035316261653431303333336131313936303239333437646232653734663763316239663364613034333431386537333166653238663331383935653234633138313964653833303534393061633834646666376265383938396162613539303335613334323764663130306232656133323063343539636563376133313763346366353865376339633662653962313938656531353639393238383265656163643839373730623733623633383230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030')

(p, q, n, phi, e, d) = getParams()

print("Public parameters -- \ne: ", e, "\nn: ", n)
print("ciphertext:", dec(ciphertext, d, n))
sys.stdout.flush()
